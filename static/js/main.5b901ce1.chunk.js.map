{"version":3,"sources":["components/todoItem/todoItem.component.jsx","components/todoList/todo.list.component.jsx","components/formInput/form-input.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","this","props","item","id","title","completed","className","type","onChange","toggleCheck","checked","onClick","handleDelete","Component","TodoList","items","map","key","FormInput","handleChange","handleSubmit","onSubmit","placeholder","value","name","React","App","state","uuid","event","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","localStorage","getItem","JSON","parse","console","log","nextProps","nextstate","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b901ce1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './todo-item.styles.scss';\n\nexport default class TodoItem extends Component {\n\n    render() {\n        const { id, title, completed } = this.props.item;\n\n        return (\n\n            <li className={completed === true ? \"checked\" : ''}>\n\n                <label> <input\n\n                    type=\"checkbox\"\n                    onChange={() => this.props.toggleCheck(id)}\n                    checked={completed ? 'checked' : ''}\n                />{' '}\n                    {title}</label>\n                <span className=\"close\" onClick={() => this.props.handleDelete(id)}>\n                    x\n                </span >\n\n            </li >\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TodoItem from '../todoItem/todoItem.component';\n// import PropTypes from 'prop-types';\n\nclass TodoList extends Component {\n    render() {\n        const { handleDelete, toggleCheck } = this.props;\n        return this.props.items.map((item) => (\n            <TodoItem\n                key={item.id}\n                item={item}\n                title={this.props.title}\n                toggleCheck={() => toggleCheck(item.id)}\n                handleDelete={() => handleDelete(item.id)}\n            />\n        ));\n    }\n}\n\n// // PropTypes\n// TodoList.propTypes = {\n//     items: PropTypes.array.isRequired,\n//     toggleCheck: PropTypes.func.isRequired,\n//     handleDelete: PropTypes.func.isRequired\n// }\nexport default TodoList;","import React from 'react';\nimport './form-input.styles.scss';\n\n\nclass FormInput extends React.Component {\n    render() {\n        const { item, handleChange, handleSubmit } = this.props;\n        return (\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <input\n                        type=\"text\"\n                        className=\"input\"\n                        placeholder=\"title\"\n                        onChange={handleChange}\n                        value={item}\n                        name=\"title\"\n                    />\n                    <button type=\"submit\" className=\"addBtn\">submit  </button>\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default FormInput;","import React, { Component } from 'react';\nimport TodoList from './components/todoList/todo.list.component';\nimport FormInput from './components/formInput/form-input.component';\nimport uuid from 'uuid';\nimport './App.scss';\n\nclass App extends Component {\n\n  state = {\n    items: [],\n    item: '',\n    id: uuid(),\n    completed: false\n  }\n\n\n\n  componentWillMount() {\n    localStorage.getItem('items') && this.setState({\n      items: JSON.parse(localStorage.getItem('items'))\n    })\n  }\n\n  componentDidMount() {\n    if (localStorage.getItem('items')) {\n      this.setState({ items: this.state.items })\n    } else {\n      console.log('using data from local ')\n    }\n  }\n\n  componentWillUpdate(nextProps, nextstate) {\n    localStorage.setItem('items', JSON.stringify(nextstate.items))\n\n  }\n\n\n\n\n  handleChange = event => {\n    this.setState({\n      item: event.target.value\n    });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.state.item === '') {\n      return;\n    }\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    }\n\n    const updatedItems = [...this.state.items, newItem];\n\n\n    this.setState({\n      items: updatedItems,\n      item: '',\n      id: uuid()\n    });\n\n\n  }\n\n  toggleCheck = (id) => {\n    this.setState({\n      items: this.state.items.map(item => {\n        if (item.id === id)\n          item.completed = !item.completed;\n        return item;\n      })\n    })\n  }\n\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item =>\n      item.id !== id);\n\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">\n\n          <h2>My To Do List</h2>\n          <FormInput\n            item={this.state.item}\n            handleChange={this.handleChange}\n            handleSubmit={this.handleSubmit} />\n        </div>\n\n\n        <TodoList\n          items={this.state.items}\n          handleDelete={this.handleDelete}\n          toggleCheck={this.toggleCheck}\n\n        />\n\n      </div>\n    )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}